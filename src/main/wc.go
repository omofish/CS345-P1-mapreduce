package main

import (
	"fmt"
	"mapreduce"
	"os"
	"strings"
	"strconv"
	"unicode"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
	// Your code here (Part 1B).


	//count := WordCount(contents)

	//fmt.Println(len(count))

	s := make([]mapreduce.KeyValue,0)

	//fmt.Println((len(s)))

	//s[0] = mapreduce.KeyValue{Key:"chris", Value: "0"} 
	f := func(c rune) bool {
		return !unicode.IsLetter(c)
	}

	//fmt.Println("inside mapf")
	words := strings.FieldsFunc(contents, f);
	//fmt.Println(words)

	

	for i := range words {
		s = append(s, mapreduce.KeyValue{Key:words[i], Value:strconv.Itoa(1)})
	}

	
	//fmt.Println(s)

	

	//fmt.Println(words)
	

	return s

}



//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceF(key string, values []string) string {
	// Your code here (Part 1B).
	//fmt.Println(key)
	//fmt.Println(values)
	value_count := 0
	//i := 0
	for g := range values {
		p := values[g]
		conv, err := strconv.Atoi(p)
		if err != nil {
			// handle error
			fmt.Println(err)
		}
		value_count += conv
		//fmt.Println(values[g])
	}

	/*
	value_count, errr := strconv.Atoi(values[0])
	if errr != nil {
		// handle error
		fmt.Println(errr)
	}

	*/

	//fmt.Println("value count")
	//fmt.Println(key)
	//fmt.Println(value_count)

	return strconv.Itoa(value_count)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
